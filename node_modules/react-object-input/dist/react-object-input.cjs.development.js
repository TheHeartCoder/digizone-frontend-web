'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var ObjectInput = function ObjectInput(_ref) {
  var obj = _ref.obj,
      onChange = _ref.onChange,
      renderItem = _ref.renderItem,
      _ref$renderAdd = _ref.renderAdd,
      renderAdd = _ref$renderAdd === void 0 ? function (addItem) {
    return React__default.createElement("button", {
      onClick: addItem
    }, "Add item");
  } : _ref$renderAdd,
      renderEmpty = _ref.renderEmpty;

  var _useState = React.useState(Math.random()),
      setRenderKey = _useState[1];

  var forceRender = React.useCallback(function () {
    return setRenderKey(Math.random);
  }, []); // stores the keys and values in order so they can be rendered consistently
  // updated in parallel with the input, and also checked each render for any
  // external data changes

  var localRef = React.useRef([]); // add a new empty item to the local array

  var addItem = React.useCallback(function () {
    localRef.current.push([undefined, undefined]);
    forceRender();
  }, [forceRender]); // purge and update items altered externally

  localRef.current = localRef.current.filter(function (_ref2) {
    var key = _ref2[0],
        value = _ref2[1];
    return !(key && value && !(key in obj));
  }).map(function (_ref3) {
    var key = _ref3[0],
        value = _ref3[1];
    return [key, key && value && obj[key] !== value ? obj[key] : value];
  }); // append any items added externally

  Object.keys(obj).forEach(function (key) {
    if (!localRef.current.find(function (_ref4) {
      var k = _ref4[0];
      return k === key;
    })) {
      localRef.current.push([key, obj[key]]);
    }
  });
  return React__default.createElement(React__default.Fragment, null, renderEmpty && !localRef.current.length ? renderEmpty() : null, localRef.current.map(function (_ref5, i) {
    var name = _ref5[0],
        value = _ref5[1];
    return React__default.createElement(React__default.Fragment, {
      key: i
    }, renderItem(name || '', value, function (newName) {
      var clash = localRef.current.findIndex(function (item) {
        return item[0] === newName;
      }) !== -1; // prevent overwrites of existing items
      // TODO work out how to keep this value transiently

      if (clash && value) {
        return;
      }

      localRef.current[i] = [newName, value];
      onChange(function (c) {
        var updated = _extends({}, c);

        if (value) {
          updated[newName] = value;

          if (typeof name === 'string') {
            delete updated[name];
          }
        }

        return updated;
      });
    }, function (newValue) {
      var clash = value === undefined && localRef.current.findIndex(function (item) {
        return item[0] === name && item[1] !== undefined;
      }) !== -1; // prevent overwrites of existing items
      // TODO work out how to keep this value transiently

      if (clash) {
        return;
      }

      localRef.current[i] = [name, newValue];

      if (typeof name === 'string') {
        onChange(function (c) {
          var _extends2;

          return _extends(_extends({}, c), {}, (_extends2 = {}, _extends2[name] = newValue, _extends2));
        });
      } else {
        forceRender();
      }
    }, function () {
      localRef.current.splice(i, 1);
      onChange(function (c) {
        var updated = _extends({}, c);

        if (typeof name === 'string') {
          delete updated[name];
        }

        return updated;
      });
    }));
  }), renderAdd(addItem));
};

exports.ObjectInput = ObjectInput;
//# sourceMappingURL=react-object-input.cjs.development.js.map
