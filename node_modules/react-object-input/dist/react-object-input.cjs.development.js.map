{"version":3,"file":"react-object-input.cjs.development.js","sources":["../src/index.tsx"],"sourcesContent":["import React, {useState, ReactElement, useCallback, useRef} from 'react'\n\nexport interface ObjectInputProps<T> {\n  renderItem: (\n    name: string,\n    value: T | undefined,\n    changeName: (newName: string) => void,\n    changeValue: (newValue: T) => void,\n    deleteProperty: () => void\n  ) => ReactElement\n  onChange: (updater: (c: {[name: string]: T}) => {[name: string]: T}) => void\n  obj: {[name: string]: T}\n  renderAdd?: (addItem: () => void) => ReactElement\n  renderEmpty?: () => ReactElement\n}\n\nexport const ObjectInput = <T extends {}>({\n  obj,\n  onChange,\n  renderItem,\n  renderAdd = addItem => <button onClick={addItem}>Add item</button>,\n  renderEmpty\n}: ObjectInputProps<T>) => {\n  const [, setRenderKey] = useState(Math.random())\n  const forceRender = useCallback(() => setRenderKey(Math.random), [])\n\n  // stores the keys and values in order so they can be rendered consistently\n  // updated in parallel with the input, and also checked each render for any\n  // external data changes\n  const localRef = useRef<[string | undefined, T | undefined][]>([])\n\n  // add a new empty item to the local array\n  const addItem = useCallback(() => {\n    localRef.current.push([undefined, undefined])\n    forceRender()\n  }, [forceRender])\n\n  // purge and update items altered externally\n  localRef.current = localRef.current\n    .filter(([key, value]) => !(key && value && !(key in obj)))\n    .map(([key, value]) => [\n      key,\n      key && value && obj[key] !== value ? obj[key] : value\n    ])\n\n  // append any items added externally\n  Object.keys(obj).forEach(key => {\n    if (!localRef.current.find(([k]) => k === key)) {\n      localRef.current.push([key, obj[key]])\n    }\n  })\n\n  return (\n    <>\n      {renderEmpty && !localRef.current.length ? renderEmpty() : null}\n      {localRef.current.map(([name, value], i) => (\n        <React.Fragment key={i}>\n          {renderItem(\n            name || '',\n\n            value,\n\n            newName => {\n              const clash =\n                localRef.current.findIndex(item => item[0] === newName) !== -1\n\n              // prevent overwrites of existing items\n              // TODO work out how to keep this value transiently\n              if (clash && value) {\n                return\n              }\n\n              localRef.current[i] = [newName, value]\n\n              onChange(c => {\n                const updated = {...c}\n\n                if (value) {\n                  updated[newName] = value\n                  if (typeof name === 'string') {\n                    delete updated[name]\n                  }\n                }\n\n                return updated\n              })\n            },\n\n            newValue => {\n              const clash =\n                value === undefined &&\n                localRef.current.findIndex(\n                  item => item[0] === name && item[1] !== undefined\n                ) !== -1\n\n              // prevent overwrites of existing items\n              // TODO work out how to keep this value transiently\n              if (clash) {\n                return\n              }\n\n              localRef.current[i] = [name, newValue]\n\n              if (typeof name === 'string') {\n                onChange(c => ({\n                  ...c,\n                  [name]: newValue\n                }))\n              } else {\n                forceRender()\n              }\n            },\n\n            () => {\n              localRef.current.splice(i, 1)\n              onChange(c => {\n                const updated = {...c}\n                if (typeof name === 'string') {\n                  delete updated[name]\n                }\n                return updated\n              })\n            }\n          )}\n        </React.Fragment>\n      ))}\n\n      {renderAdd(addItem)}\n    </>\n  )\n}\n"],"names":["ObjectInput","obj","onChange","renderItem","renderAdd","addItem","React","onClick","renderEmpty","useState","Math","random","setRenderKey","forceRender","useCallback","localRef","useRef","current","push","undefined","filter","key","value","map","Object","keys","forEach","find","k","length","i","name","Fragment","newName","clash","findIndex","item","c","updated","newValue","splice"],"mappings":"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"}